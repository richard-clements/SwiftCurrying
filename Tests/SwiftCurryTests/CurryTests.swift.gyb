import XCTest
@testable import SwiftCurry
%{
from environs import Env
env = Env()
env.read_env()
max_arguments = int(env("MAX_ARGUMENTS"))
}%

final class CurryTests: XCTestCase {
% for argument_count in range(2, max_arguments + 1):
    func testCurry${argument_count}() {
        %{
        argument_names = ", ".join(map(lambda x: "x%s: String" % x, range(0, argument_count)))
        function_return = "".join(map(lambda x: "\(x%s)" % x, range(0, argument_count)))
        }%
        func testingFunction(${argument_names}) -> String {
            "${function_return}"
        }
        %{
        input_parameters = "".join(map(lambda x: "(\"%d\")" % x, range(0, argument_count)))
        }%
        XCTAssertEqual(curry(testingFunction)${input_parameters}, "${"".join(map(lambda x: str(x), reversed(range(0, argument_count))))}")
    }
%end
}

extension CurryTests {

    static var allTests = [
        % for argument_count in range(2, max_arguments + 1):
        ("testCurry${argument_count}", testCurry${argument_count}),
        % end
    ]

}
