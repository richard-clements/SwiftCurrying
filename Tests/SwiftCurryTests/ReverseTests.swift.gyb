import XCTest
@testable import SwiftCurry
%{
from environs import Env
env = Env()
env.read_env()
max_arguments = int(env("MAX_ARGUMENTS"))
}%

final class ReverseTests: XCTestCase {
% for argument_count in range(2, max_arguments + 1):
    %{
    argument_names = ", ".join(map(lambda x: "x%s: String" % x, range(0, argument_count)))
    function_return = "".join(map(lambda x: "\(x%s)" % x, range(0, argument_count)))
    }%
    func testReverse${argument_count}() {
        func testingFunction(${argument_names}) -> String {
            "${function_return}"
        }
        
        XCTAssertEqual(reverse(testingFunction)(${", ".join(map(lambda x: '"' + str(x) + '"', range(0, argument_count)))}), "${"".join(map(lambda x: str(x), reversed(range(0, argument_count))))}")
    }
%end
}

extension ReverseTests {

    static var allTests = [
        % for argument_count in range(2, max_arguments + 1):
        ("testReverse${argument_count}", testReverse${argument_count}),
        % end
    ]
    
}
